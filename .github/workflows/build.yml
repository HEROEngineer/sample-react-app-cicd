name: Build

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master"]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # - name: Setup go
      #   uses: actions/setup-go@v3
      #   with:
      #     go-version: '^1.19'
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with: 
          node-version: '^14'
      - run: npm install -g create-react-app
      - run: npm install
      - run: npm start
      - run: npm stop
      # - name: Setup golangci-lint
      #   uses: golangci/golangci-lint-action@v3
      #   with:
      #     version: latest
      #     args: --verbose --timeout=3m

  # test:
  #   needs: lint
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #       go: ['1.18', '1.19', '1.20']
  #       include:
  #         - os: ubuntu-latest
  #           go-build: ~/.cache/go-build
  #           runs-on: ubuntu-latest
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Set up Go ${{ matrix.go }}

  #       uses: actions/setup-go@v3
  #       with:
  #         go-version: ${{ matrix.go }}

  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Run Tests
  #       run: make test

  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         flags: ${{ matrix.os }},go-${{ matrix.go }},${{ matrix.test-tags }}

  #     - name: Format
  #       if: matrix.go-version == '1.20.x'
  #       run: diff -u <(echo -n) <(gofmt -d .)

  # build:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       name: Check out code

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}  

  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         push: ${{ github.event_name != 'pull-request' }} 
  #         tags: lovefeynman/test-assignment:latest

  # package:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Run chart-releaser
  #       uses: helm/chart-releaser-action@v1.5.0
  #       env:
  #         CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

